//Initialization
console.log("Hello World. Initializing.");
var mechList = {//Provides a list of mechs for the game to draw upon
    mechListFormat:{
        id: "mechtypename",
        faction: "mechtypicalfaction",
        hp: 1,
        attack: 1,
        speed: 1,
    },
    phoenix: {
        id:"phoenix",
        faction: "izaria",
        hp: 10,
        attack: 2,
        speed: 2 
    },
    pinch:{
        id:"pinch",
        faction: "kaiju",
        hp: 3,
        attack: 1,
        speed: 7
    }
 };
console.log("mechList initialized with " + Object.keys(mechList).length + " types of unit.");
var fighters = [];
var wantLogs = false;
console.log(wantLogs)

//Administrative Tools
function setlogging(loggingBoolean){
    //Sets up a louder logging mode via the 'wantLogs' flag
    if(loggingBoolean == true){
        wantLogs = true
        console.log ("Excessive Logging Mode: Activated") 
    }
    if(loggingBoolean == false){
        wantLogs = false;
        console.log ("Excessive Logging Mode: Not Activated") 
        };
};

//Battle!
function addFighter(type,team){
//Adds a fighter to either team 0 or team 1
//Valid fighters are located in mechList.

    //Logs
    if(wantLogs == true){
        console.log("Current fighters is: ")
        console.log(fighters)
        console.log("Adding a " + type + " to team " + team)
    };
//Set fighters
    fighters[team] = mechList[type];
    if(wantLogs == true){
        console.log("new fighter is: ")
        console.log(fighters[team])
    };
};

function getInitiative(){//Helper Function to create an initiative order.
    var initiativeOrder = [];
    var needInitiative = [...fighters];
    //Finds the highest initiative of the unassigned units and moves it to the initiativeOrder array, repeats until no more need Initiative, then returns that array. Ties go to the unit earlier in the list.
    while(needInitiative.length > 0){
        if(wantLogs = true){
            console.log("need Initiative is length " + needInitiative.length + " and contains: ")
            console.log (needInitiative)
        };
        topInit = Number.MIN_SAFE_INTEGER
        for(const i in needInitiative){
            if(wantLogs == true){
                console.log("i is " + i);
                console.log("current i's speed is: " + needInitiative[i].speed);
            };
            if (needInitiative[i].speed > topInit){
                topInit = needInitiative[i].speed
                topInitIndex = i
            };
        };    
        initiativeOrder.push(needInitiative.splice(topInitIndex,1))
    };
    if(wantLogs = true){
        console.log("Initiative Order Is:")
    console.log(initiativeOrder);
    };
    return initiativeOrder; 
};

function haveBattle(){
    var turncount = 0
    while(fighters.filter(x => x.hp > 0).length > 1){
        turncount = turncount + 1;
        console.log("Begin Turn " + turncount + ".")
        //Establish Initiative Order
        console.log("Pre-Initiative Fighters")
        console.log(fighters);
        var initiativeOrder = getInitiative();
        console.log("is fighters lost?");
        console.log(fighters);
        for (const i in initiativeOrder){
            console.log("Initiative Order has " + initiativeOrder.length + " units. We are on...")
            console.log("i = " + i);

            //The Attack!
            //Find Current Mech
            var currentMech = initiativeOrder[i][0]
            console.log(currentMech)
            //Find Current Mech's Attack Value
            var attackDamage = currentMech.attack;
            console.log("Attack is " + attackDamage);
            //Which team are you on?
            var currentMechTeam = null
            var oppMechTeam = null
            console.log(fighters)
            console.log(currentMech)
            //INVESTIGATE WHATS WRONG WITH THIS J
            for(const j in fighters){
                if(fighters[j].id == currentMech[0].id){
                    currentMechTeam = i;
                    console.log("Setting team to " + currentMechTeam);
                }
            };
            //Invert. This is sloppy.
            if(currentMechTeam == 0){
                oppMechTeam == 1;
            };
            if(currentMechTeam == 1){
                oppMechTeam == 0;
            };
            console.log("oppMechTeam is " + oppMechTeam);
            //var targetMech = 0;
        };
        
        //Ends battle immediately
        fighters[0][0].hp = 0;
        
        //Go through each mech on list in speed order
            //Deal Damage to opposing fighter.
            //Check for death
        //Start over

    }
};



//Tests
setlogging(true);
addFighter("phoenix",0)
addFighter("pinch",1)
haveBattle();