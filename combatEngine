//Initialization
console.log("Hello World. Initializing.");
var prompt = require('prompt-sync')();

var weaponList = {//Provides a list of weapons for use by game assets
    weaponListFormat:{
        displayName: "Weapon Name", //User-facing display name 
        weaponDamage: 5, //Damage dealt by weapon
        weaponRange: 2, //Number of squares of range
        cooldown: 0, //Number of turns of cooldown between uses. Set 0 for no cooldown.
        ammo: 0, //Number of uses per mission. Set -1 for Limitless
        type: "Light/Medium/Heavy/Ult",
        },
    laserGun:{
        weaponDamage: 2,
        weaponRange: 10,
        cooldown: 3,
        ammo: 0,
        type: "Light",     
    },
    bigGun: {
        weaponDamage: 50,
        weaponRange: 99,
        cooldown: 10,
        ammo: 1,
        type: "Ult"
    },
    beamSword: {
        weaponDamage: 7,
        weaponRange: 1,
        cooldown: 0,
        ammo: 0,
        type: "Medium"
    },
    claw: {
        weaponDamage: 1,
        weaponRange: 1,
        cooldown: 0,
        ammo: 0
    },   
 };
 
var mechList = {//Provides a list of mechs for the game to draw upon
    mechListFormat:{
        id: "mechtypename",
        faction: "mechtypefaction",
        maxHP: 1,
        hp: 1,
        hardpoints: [
            {hardpointName: "Hardpoint Name",
            hardpointType: "Light/Medium/Heavy/Ultimate" 
            },
            {hardpointName: "Hardpoint 2 Name",
            hardpointType: "Light/Medium/Heavy/Ultimate" 
            },
            {hardpointName: "Hardpoint 3 Name",
            hardpointType: "Light/Medium/Heavy/Ultimate" 
            }     
        ],
        subsystems: [
            {subsystemName: "Subsystem Name",
            subsystemType: "N/A" //TODO: Enumerate some of these. Covert, Marksman, Tank, Support, etc?
            }
        ],
        speed: 1,
    },
    phoenix: {
        id:"phoenix",
        faction: "izaria",
        maxHP: 10,
        hp: 10,
        hardpoints: [
            {hardpointName: "beamSword",
            hardpointType: "Medium" 
            },
        ],
        speed: 2 
    },
    pinch:{
        id:"pinch",
        faction: "kaiju",
        maxHP: 3,
        hp: 3,
        hardpoints: [
            {hardpointName: "claw",
            hardpointType: "Small" 
            },
        ],
        speed: 7
    }
};

var pilotList = {
    pilotListFormat: {
        pilotName: "firstName lastName",
        pilotRank: "Ensign/Lieutenant/Commander",
        pilotAffinity: "Ring, Key, Both, Neither",
        pilotLevel: 1,
        pilotXP: 0,
        pilotAbility: "abilityName",
        pilotAim: 1.00,
        pilotResponseTime: 1.00,


    },
    heero: {
        pilotName: "Heero Yuy",
        pilotRank: "Lieutenant",
        pilotAffinityType: "Neither",
        pilotAffinityValue: 0, 
        pilotLevel: 1,
        pilotXP: 0,
        pilotAbility: "Overly Dramatic",
        pilotAim: .85,
        pilotResponseTime: .70,
    },
    duo: {
        pilotName: "Duo Maxwell",
        pilotRank: "Lieutenant",
        pilotAffinityType: "Key",
        pilotAffinityValue: 5, 
        pilotLevel: 2,
        pilotXP: 300,
        pilotAbility: "Too Cool For School",
        pilotAim: .50,
        pilotResponseTime: .90,
    },
};

console.log("mechList initialized with " + Object.keys(mechList).length + " types of unit.");
var fighters = [];
var wantLogs = false;
console.log(wantLogs)

//Administrative Tools
function setlogging(loggingBoolean){
    //Sets up a louder logging mode via the 'wantLogs' flag
    if(loggingBoolean == true){
        wantLogs = true
        console.log ("Excessive Logging Mode: Activated") 
    }
    if(loggingBoolean == false){
        wantLogs = false;
        console.log ("Excessive Logging Mode: Not Activated") 
        };
};

//Battle!
function addFighter(type,team){
//Adds a fighter to either team 0 or team 1
//Valid fighters are located in mechList.

    //Logs
    if(wantLogs == true){
        console.log("Current fighters is: ")
        console.log(fighters)
        console.log("Adding a " + type + " to team " + team)
    };
//Set fighters
    fighters[team] = JSON.parse(JSON.stringify(mechList[type]));
    if(wantLogs == true){
        console.log("new fighter is: ")
        console.log(fighters[team])
    };
};

function getInitiative(){//Helper Function to create an initiative order.
    var initiativeOrder = [];
    var needInitiative = [...fighters];
    //Finds the highest initiative of the unassigned units and moves it to the initiativeOrder array, repeats until no more need Initiative, then returns that array. Ties go to the unit earlier in the list.
    while(needInitiative.length > 0){
        if(wantLogs = true){
            console.log("need Initiative is length " + needInitiative.length + " and contains: ")
            console.log (needInitiative)
        };
        topInit = Number.MIN_SAFE_INTEGER
        for(const i in needInitiative){
            if(wantLogs == true){
                console.log("i is " + i);
                console.log("current i's speed is: " + needInitiative[i].speed);
            };
            if (needInitiative[i].speed > topInit){
                topInit = needInitiative[i].speed
                topInitIndex = i
            };
        };    
        initiativeOrder.push(needInitiative.splice(topInitIndex,1))
    };
    if(wantLogs = true){
        console.log("Initiative Order Is:")
    console.log(initiativeOrder);
    };
    return initiativeOrder; 
};

function haveBattle(){//Runs a battle.
    var turnCount = 0;
    var oppMechTeam = -1;
    var killList = [];
    while(fighters.filter(x => x.hp > 0).length > 1){
        turnCount = turnCount + 1;
        console.log("Begin Turn " + turnCount + ".")
        
        //Establish Initiative Order
        var initiativeOrder = getInitiative();
        for (const i in initiativeOrder){
            console.log("Initiative Order has " + initiativeOrder.length + " units. We are on...")
            console.log("i = " + i);

            //The Attack!
            //Find Current Mech
                var currentMechArray = [...initiativeOrder[i]]
                var currentMechObj = currentMechArray[0];
                console.log(currentMechObj);
            //How many weapons does the mech have?
                //if one, use that
                //if more than one, prompt user to select one
            //Find Current Mech's Selected Weapon Attack Value
                var attackDamage = weaponList[currentMechObj.hardpoints[0].hardpointName].weaponDamage;
                console.log("Attack is " + attackDamage);
            //Which team are you on?
                var currentMechTeam = null
                for(const j in fighters){
                    if(fighters[j].id == currentMechObj.id){
                        currentMechTeam = j;
                        console.log("Setting active team to " + currentMechTeam);
                        break;                    
                    }
                };         
            //Invert to find opponents. This is sloppy.
                if(currentMechTeam == 0){
                    oppMechTeam = 1;
                };
                if(currentMechTeam == 1){
                    oppMechTeam = 0;
                };
                console.log("oppMechTeam is " + oppMechTeam);
            //Fire and Decrement HP
                console.log("Target Acquired. " + fighters[oppMechTeam].id + " has " + fighters[oppMechTeam].hp + " Hit Points. Firing Weapon for " + attackDamage + " damage.")
                fighters[oppMechTeam].hp -= attackDamage;
                console.log("Target hit! Now it only has " + fighters[oppMechTeam].hp + " Hit Points!")
            //Kill Checker
                //TODO: Rewrite this eventually to check for any deaths not just the target.
                if (fighters[oppMechTeam].hp < 1){
                console.log("The " + fighters[oppMechTeam].id + " explodes and is removed from combat!")
                killList = fighters.splice(oppMechTeam,1)
                //TODO: only works with one opposing mech.
                }    
        };
    }
    endOfBattleMemo(turnCount, killList)
};

function generateMap(maxXCoord, maxYCoord){
    console.log("Max X is " + maxXCoord);
    console.log("Max Y is " + maxYCoord);
    var outputMap = [];
    for (let currX = 0; currX <= maxXCoord; currX++){
        outputMap[currX] = [];
        console.log("x is " + currX);
        for (let currY = 0; currY <= maxYCoord; currY++){
            console.log("y is " + currY);
            outputMap[currX][currY] = currX + "," + currY;
        }; 
    };
    console.log(outputMap);
    return outputMap;
};

function endOfBattleMemo(turnCount, killList){ //Generates a memo detailing the end of the battle that took place.
    console.log("======================")
    console.log("End of Battle!");
    console.log("Combat Ended in " + turnCount + " turns.");
    console.log("Destroyed Units:");
    console.log(killList);
    console.log("Experience Points Gained: " + killList.length * 100 + " XP");
}

//Tests
/*
setlogging(true);
addFighter("phoenix",0)
addFighter("pinch",1);
console.log("Pre Battle Fighters");
console.log(fighters);
haveBattle();
addFighter("pinch",1);
haveBattle();
console.log("END SIMULATION");
console.log(fighters);
*/

generateMap(20,3);